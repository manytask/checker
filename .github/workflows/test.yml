name: Lint and Test

on:
  push:
  pull_request:
    branches: [ master ]


jobs:
  lint-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10']
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements.test.txt') }}-test
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-
            ${{ runner.os }}-python-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install wheel
          python -m pip install -e .[test]
      - name: Run isort
        run: python -m isort checker --check
      - name: Run flake8
        run: python -m flake8 checker
      - name: Run mypy
        run: python -m mypy checker

  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10']
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements.test.txt') }}-test
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-
            ${{ runner.os }}-python-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install wheel
          python -m pip install -e .[test]
      - name: Run tests
        run: python -m pytest --cov-report=xml tests/
      - name: Upload coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # not required for public repos
          files: coverage.xml
          flags: unittests  # optional
          fail_ci_if_error: true  # optional (default = false)
          verbose: true  # optional (default = false)

  build-python-package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: 3.9
      - uses: actions/cache@v3
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ env.pythonLocation }}-${{ hashFiles('requirements.txt', 'requirements.test.txt') }}-test
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version }}-
            ${{ runner.os }}-python-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install wheel
      - name: Build wheel
        run: |
          python -m pip wheel . --no-deps --wheel-dir dist
